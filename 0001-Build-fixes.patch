From e8d53e0b2a3d2520137687ebd13208cc25f46be3 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 24 Oct 2018 10:09:33 -0700
Subject: [PATCH] Build fixes.

---
 inference-engine/CMakeLists.txt               | 10 +++
 inference-engine/cmake/config.cmake.in        | 12 +++-
 inference-engine/cmake/linux_name.cmake       |  2 +-
 inference-engine/cmake/os_flags.cmake         |  2 +-
 .../cmake/share/InferenceEngineConfig.cmake   |  2 +-
 .../ie_bridges/python/CMakeLists.txt          |  8 ++-
 .../ie_bridges/python/cmake/FindCython.cmake  | 16 +----
 .../ie_bridges/python/cmake/UseCython.cmake   |  2 +-
 .../python/inference_engine/CMakeLists.txt    |  7 +-
 .../ie_bridges/python/requirements.txt        |  1 -
 inference-engine/ie_bridges/python/setup.py   | 64 ++-----------------
 inference-engine/samples/CMakeLists.txt       |  2 +-
 inference-engine/src/extension/CMakeLists.txt |  1 +
 .../src/inference_engine/CMakeLists.txt       | 13 +++-
 .../thirdparty/mkl-dnn/cmake/platform.cmake   |  4 +-
 15 files changed, 56 insertions(+), 90 deletions(-)

diff --git a/inference-engine/CMakeLists.txt b/inference-engine/CMakeLists.txt
index 2f561d9..6d15d21 100644
--- a/inference-engine/CMakeLists.txt
+++ b/inference-engine/CMakeLists.txt
@@ -127,6 +127,16 @@ endif(UNIX)
 add_subdirectory(src)
 add_subdirectory(tests)
 add_subdirectory(thirdparty)
+
+option(ENABLE_PYTHON_BINDINGS "Build python bindings." OFF)
+if (ENABLE_PYTHON_BINDINGS)
+    set(InferenceEngine_DIR "${CMAKE_BINARY_DIR}")
+
+    #to be able to link
+    set (LIB_FOLDER ${IE_MAIN_SOURCE_DIR}/${BIN_FOLDER}/${CMAKE_BUILD_TYPE}/lib)
+    add_subdirectory(ie_bridges/python)
+endif()
+
 if (ENABLE_SAMPLES_CORE)
     set(InferenceEngine_DIR "${CMAKE_BINARY_DIR}")
 
diff --git a/inference-engine/cmake/config.cmake.in b/inference-engine/cmake/config.cmake.in
index a17d6da..02e6928 100644
--- a/inference-engine/cmake/config.cmake.in
+++ b/inference-engine/cmake/config.cmake.in
@@ -3,9 +3,17 @@
 #
 if(DEFINED IE_MAIN_SOURCE_DIR AND TARGET inference_engine)
     set(InferenceEngine_INCLUDE_DIRS ${IE_MAIN_SOURCE_DIR}/include)
-    set(InferenceEngine_LIBRARIES inference_engine)
+    if(NOT(UNIX))
+        set(InferenceEngine_LIBRARIES IE::inference_engine)
+    else()
+        set(InferenceEngine_LIBRARIES inference_engine)
+    endif()
 else()
     include("${CMAKE_CURRENT_LIST_DIR}/targets.cmake")
     get_target_property(InferenceEngine_INCLUDE_DIRS IE::inference_engine INTERFACE_INCLUDE_DIRECTORIES)
-    set(InferenceEngine_LIBRARIES IE::inference_engine)
+    if(NOT(UNIX))
+        set(InferenceEngine_LIBRARIES IE::inference_engine)
+    else()
+        set(InferenceEngine_LIBRARIES inference_engine)
+    endif()
 endif()
diff --git a/inference-engine/cmake/linux_name.cmake b/inference-engine/cmake/linux_name.cmake
index 78b0c50..efd084f 100644
--- a/inference-engine/cmake/linux_name.cmake
+++ b/inference-engine/cmake/linux_name.cmake
@@ -8,7 +8,7 @@ cmake_minimum_required(VERSION 2.8)
 if (UNIX)
     function(get_linux_name res_var)
         if (NOT EXISTS "/etc/lsb-release")
-            execute_process(COMMAND find /etc/ -maxdepth 1 -type f -name *-release -exec cat {} \;
+            execute_process(COMMAND find /usr/lib/ -maxdepth 1 -type f -name *-release -exec cat {} \;
                     OUTPUT_VARIABLE release_data RESULT_VARIABLE result)
             set(name_regex "NAME=\"([^ \"\n]*).*\"\n")
             set(version_regex "VERSION=\"([0-9]+(\\.[0-9]+)?)[^\n]*\"")
diff --git a/inference-engine/cmake/os_flags.cmake b/inference-engine/cmake/os_flags.cmake
index 7069847..ed76818 100644
--- a/inference-engine/cmake/os_flags.cmake
+++ b/inference-engine/cmake/os_flags.cmake
@@ -9,7 +9,7 @@ if (WIN32)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc") #no asynchronous structured exception handling
 	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Werror=return-type ")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -Werror=return-type ")
     if (APPLE)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-command-line-argument")
     elseif(UNIX)
diff --git a/inference-engine/cmake/share/InferenceEngineConfig.cmake b/inference-engine/cmake/share/InferenceEngineConfig.cmake
index 59d8260..f530f3d 100644
--- a/inference-engine/cmake/share/InferenceEngineConfig.cmake
+++ b/inference-engine/cmake/share/InferenceEngineConfig.cmake
@@ -57,7 +57,7 @@ else()
             set(_OS_PATH "")
         else()
            if (NOT EXISTS "/etc/lsb-release")
-                execute_process(COMMAND find /etc/ -maxdepth 1 -type f -name *-release -exec cat {} \;
+                execute_process(COMMAND find /usr/lib/ -maxdepth 1 -type f -name *-release -exec cat {} \;
                             OUTPUT_VARIABLE release_data RESULT_VARIABLE result)
                 set(name_regex "NAME=\"([^ \"\n]*).*\"\n")
                 set(version_regex "VERSION=\"([0-9]+(\\.[0-9]+)?)[^\n]*\"")
diff --git a/inference-engine/ie_bridges/python/CMakeLists.txt b/inference-engine/ie_bridges/python/CMakeLists.txt
index 0fed229..e4d3449 100644
--- a/inference-engine/ie_bridges/python/CMakeLists.txt
+++ b/inference-engine/ie_bridges/python/CMakeLists.txt
@@ -13,6 +13,8 @@ set (IE_DEFAULT_PATH computer_vision_sdk/deployment_tools/inference_engine/share
 
 find_package(InferenceEngine REQUIRED PATHS /opt/intel/${IE_DEFAULT_PATH} $ENV{HOME}/intel/${IE_DEFAULT_PATH})
 
+link_directories(${LIB_FOLDER})
+
 # Make the scripts available in the 'cmake' directory available for the
 # 'include()' command, 'find_package()' command.
 set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR}/cmake )
@@ -36,7 +38,11 @@ add_custom_target( CopyIeLibs ${CMAKE_COMMAND} -P
   ${IE_ROOT_DIR}/bin/${_ARCH}/Release ${_IE_ROOT_LIBRARY}
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ie_driver )
 
-include_directories( IE::inference_engine )
+if(NOT(UNIX))
+    include_directories( IE::inference_engine )
+else()
+    include_directories( ${IE_MAIN_SOURCE_DIR}/include )
+endif()
 
 # Process the CMakeLists.txt in the 'src' and 'bin' directory.
 add_subdirectory( inference_engine )
diff --git a/inference-engine/ie_bridges/python/cmake/FindCython.cmake b/inference-engine/ie_bridges/python/cmake/FindCython.cmake
index 30e1f03..ab0bce9 100644
--- a/inference-engine/ie_bridges/python/cmake/FindCython.cmake
+++ b/inference-engine/ie_bridges/python/cmake/FindCython.cmake
@@ -22,21 +22,7 @@
 # limitations under the License.
 #=============================================================================
 
-# Use the Cython executable that lives next to the Python executable
-# if it is a local installation.
-find_package( PythonInterp )
-if( PYTHONINTERP_FOUND )
-  get_filename_component( _python_path ${PYTHON_EXECUTABLE} PATH )
-  find_program( CYTHON_EXECUTABLE
-    NAMES cython cython.bat cython3
-    HINTS ${_python_path} $ENV{HOME}/.local/bin
-    )
-else()
-  find_program( CYTHON_EXECUTABLE
-    NAMES cython cython.bat cython3
-    )
-endif()
-
+set ( CYTHON_EXECUTABLE "${CMAKE_CYTHON_EXECUTABLE}" )
 
 include( FindPackageHandleStandardArgs )
 FIND_PACKAGE_HANDLE_STANDARD_ARGS( Cython REQUIRED_VARS CYTHON_EXECUTABLE )
diff --git a/inference-engine/ie_bridges/python/cmake/UseCython.cmake b/inference-engine/ie_bridges/python/cmake/UseCython.cmake
index ee631b7..5740f87 100644
--- a/inference-engine/ie_bridges/python/cmake/UseCython.cmake
+++ b/inference-engine/ie_bridges/python/cmake/UseCython.cmake
@@ -72,7 +72,7 @@ set( CYTHON_FLAGS "" CACHE STRING
 mark_as_advanced( CYTHON_ANNOTATE CYTHON_NO_DOCSTRINGS CYTHON_FLAGS )
 
 find_package( Cython REQUIRED )
-find_package( PythonLibs REQUIRED )
+find_package( Python "${CMAKE_PYTHON_VERSION}" EXACT REQUIRED )
 
 set( CYTHON_CXX_EXTENSION "cxx" )
 set( CYTHON_C_EXTENSION "c" )
diff --git a/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt b/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
index 2835e04..f94e1da 100644
--- a/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
+++ b/inference-engine/ie_bridges/python/inference_engine/CMakeLists.txt
@@ -33,7 +33,12 @@ cython_add_module(
     ie_api.pyx
 )
 
-target_link_libraries(ie_api PRIVATE IE::inference_engine)
+if(NOT(UNIX))
+    target_link_libraries(ie_api PRIVATE IE::inference_engine)
+else()
+    target_link_libraries(ie_api PRIVATE inference_engine)
+endif()
+
 set_target_properties(ie_api PROPERTIES CXX_STANDARD 11 LINKER_LANGUAGE CXX)
 
 #if (NOT UNIX AND ${PYTHON_VERSION_STRING} MATCHES "^1.4")
diff --git a/inference-engine/ie_bridges/python/requirements.txt b/inference-engine/ie_bridges/python/requirements.txt
index cb990c6..513352a 100644
--- a/inference-engine/ie_bridges/python/requirements.txt
+++ b/inference-engine/ie_bridges/python/requirements.txt
@@ -1,3 +1,2 @@
-opencv-python
 numpy
 cython
\ No newline at end of file
diff --git a/inference-engine/ie_bridges/python/setup.py b/inference-engine/ie_bridges/python/setup.py
index 41f8772..cf2a153 100644
--- a/inference-engine/ie_bridges/python/setup.py
+++ b/inference-engine/ie_bridges/python/setup.py
@@ -1,5 +1,5 @@
 import subprocess
-from pathlib import Path
+import os
 import platform
 import sys
 from itertools import chain
@@ -18,7 +18,7 @@ IS_LINUX = (platform.system() == 'Linux')
 REQUIREMENTS_FILE = 'requirements.txt'
 PACKAGE_NAME = 'inference_engine'
 
-PACKAGE = Path(PACKAGE_NAME)
+PACKAGE = PACKAGE_NAME
 C_LIB_NAME = '{}._C'.format(PACKAGE_NAME)
 
 _build_cmd = ['cmake', '--build', '.']
@@ -92,45 +92,10 @@ class build_ext(_build_ext):
         super().run()
 
     def _build_cmake(self):
-        print("Building C++ extension")
-        if Path.cwd().joinpath("Makefile").is_file():
-            # in build directory, run make only
-            subprocess.call(_build_cmd)
-        else:
-            # compile extension library and
-            self.build_cmake_lib()
-        print("Built C++ extension")
+        pass
 
     def build_cmake_lib(self):
-        def save_call(*args, error_msg=None, **kwargs):
-            if subprocess.call(*args, **kwargs) != 0:
-                if error_msg:
-                    print(error_msg)
-                shutil.rmtree(tmp_build_dir.as_posix(), ignore_errors=True)
-                sys.exit(1)
-
-        tmp_build_dir = Path("tmp_build")
-        destination = Path(self.build_lib) / PACKAGE_NAME if not self.inplace else Path(PACKAGE_NAME)
-        tmp_build_dir.mkdir(exist_ok=False)
-
-        _python_executable_opt = ['-DPYTHON_EXECUTABLE={}'.format(sys.executable)]
-        _build_type_opt = ['-DCMAKE_BUILD_TYPE=Release']
-        _generator_opt = ['-G', 'NMake Makefiles' if IS_WINDOWS else "Unix Makefiles"]
-
-        _optional = []
-        if BUNDLE_INFERENCE_ENGINE:
-            _optional.append('-DCOPY_IE_LIBS=ON')
-
-        if INFERENCE_ENGINE_DIR:
-            _optional.append('-DInferenceEngine_DIR={}'.format(INFERENCE_ENGINE_DIR))
-
-        _cmake_cmd = list(chain(['cmake'], _generator_opt, _build_type_opt, _python_executable_opt, _optional, ['..']))
-
-        save_call(_cmake_cmd, cwd=tmp_build_dir.as_posix(), error_msg="Cmake generator failed")
-        save_call(_build_cmd, cwd=tmp_build_dir.as_posix(), error_msg="Build command failed")
-
-        build_ext.copy_compiled_libs(tmp_build_dir / PACKAGE_NAME, destination)
-        shutil.rmtree(tmp_build_dir.as_posix(), ignore_errors=False)
+        pass
 
     @staticmethod
     def copy_compiled_libs(source_dir, destination):
@@ -141,10 +106,6 @@ class build_ext(_build_ext):
 
 class clean(_clean):
     def run(self):
-        shutil.rmtree("tmp_build", ignore_errors=True)
-        extensions = ['so', 'dll', 'pyd']
-        for path in chain.from_iterable(PACKAGE.glob("*.%s" % ext) for ext in extensions):
-            path.unlink()
         super().run()
 
 
@@ -155,28 +116,11 @@ def paths_to_str(paths):
 with open(REQUIREMENTS_FILE) as reqs:
     requirements = set(reqs.read().splitlines())
 
-# do not spoil pre-installed opencv (in case it was built from source)
-_opencv_package = "opencv-python"
-try:
-    import cv2
-
-    if _opencv_package in requirements:
-        requirements.remove(_opencv_package)
-except ImportError:
-    requirements.add(_opencv_package)
-
 
 c_sources = [
-    PACKAGE / 'ie_driver.cpp',
-    PACKAGE / 'ie_driver.hpp',
-
-    PACKAGE / 'c_ie_driver.pxd',
-    PACKAGE / 'ie_driver.pyx',
-    PACKAGE / 'ie_driver.pxd',
 ]
 
 extensions = [
-    Extension(C_LIB_NAME, paths_to_str(c_sources))
 ]
 
 cmdclass = {
diff --git a/inference-engine/samples/CMakeLists.txt b/inference-engine/samples/CMakeLists.txt
index 8360a77..630ec30 100644
--- a/inference-engine/samples/CMakeLists.txt
+++ b/inference-engine/samples/CMakeLists.txt
@@ -73,7 +73,7 @@ if (WIN32)
         endif()
     endif()
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Werror=return-type ")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type ")
     if (APPLE)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-command-line-argument")
     elseif(UNIX)
diff --git a/inference-engine/src/extension/CMakeLists.txt b/inference-engine/src/extension/CMakeLists.txt
index 6642ea1..9caa1cd 100644
--- a/inference-engine/src/extension/CMakeLists.txt
+++ b/inference-engine/src/extension/CMakeLists.txt
@@ -9,6 +9,7 @@ file(GLOB_RECURSE HDR *.hpp)
 if(WIN32)
     add_definitions(-DIMPLEMENT_INFERENCE_ENGINE_API)
 endif()
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp ")
 
 include_directories (PRIVATE
         ${CMAKE_CURRENT_SOURCE_DIR}/common
diff --git a/inference-engine/src/inference_engine/CMakeLists.txt b/inference-engine/src/inference_engine/CMakeLists.txt
index 3f4d678..8741e51 100644
--- a/inference-engine/src/inference_engine/CMakeLists.txt
+++ b/inference-engine/src/inference_engine/CMakeLists.txt
@@ -61,7 +61,7 @@ target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/
 target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/thirdparty/ade/ade/include")
 target_include_directories(${TARGET_NAME} SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR}/thirdparty/ade/common/include")
 
-set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME})
+set_target_properties(${TARGET_NAME} PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME} SOVERSION 1)
 
 # Static library used for unit tests which are always built
 
@@ -81,7 +81,7 @@ target_include_directories(${TARGET_NAME}_s SYSTEM PRIVATE "${IE_MAIN_SOURCE_DIR
 
 target_compile_definitions(${TARGET_NAME}_s PUBLIC -DUSE_STATIC_IE)
 
-set_target_properties(${TARGET_NAME}_s PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME}_s)
+set_target_properties(${TARGET_NAME}_s PROPERTIES COMPILE_PDB_NAME ${TARGET_NAME}_s SOVERSION 1)
 
 # export targets
 
@@ -95,4 +95,11 @@ configure_file(
 configure_file(
     "${CMAKE_SOURCE_DIR}/cmake/share/InferenceEngineConfig-version.cmake"
     "${CMAKE_BINARY_DIR}/InferenceEngineConfig-version.cmake"
-    COPYONLY)
\ No newline at end of file
+    COPYONLY)
+
+install(TARGETS ${TARGET_NAME} LIBRARY DESTINATION lib64)
+install(FILES ${PUBLIC_HEADERS} DESTINATION include/${TARGET_NAME})
+install(FILES
+    "${CMAKE_BINARY_DIR}/InferenceEngineConfig.cmake"
+    "${CMAKE_BINARY_DIR}/InferenceEngineConfig-version.cmake"
+    DESTINATION ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules)
diff --git a/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake b/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
index fa51aa7..e2f22c7 100644
--- a/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
+++ b/inference-engine/thirdparty/mkl-dnn/cmake/platform.cmake
@@ -53,10 +53,10 @@ if(WIN32 AND NOT MINGW)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qdiag-disable:15552")
     endif()
 elseif(UNIX OR APPLE OR MINGW)
-    set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -Wall -Werror -Wno-unknown-pragmas")
+    set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -Wall -Wno-unknown-pragmas")
     set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -fvisibility=internal")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fvisibility-inlines-hidden")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -fvisibility-inlines-hidden")
     # compiler specific settings
     if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
         # Clang cannot vectorize some loops with #pragma omp simd and gets
-- 
2.19.1

